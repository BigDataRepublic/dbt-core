name: Performance Regression Tests
# Schedule triggers
on:
  # TODO THIS IS FOR DEV ONLY:
  pull_request:
  # runs twice a day at 10:05am and 10:05pm
  schedule:
    - cron: "5 10,22 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RUNNER_CACHE_PATH: performance/runner/target/release/runner

jobs:
  latest-runner:
    name: Build Runner or Use Cached
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # attempts to access a previously cached runner
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.RUNNER_CACHE_PATH }}
          key: ${{ runner.os }}-${{ hashFiles('performance/runner/Cargo.toml')}}-${{ hashFiles('performance/runner/src/*') }}

      - name: Fetch Rust Toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add fmt
        if: steps.cache.outputs.cache-hit != 'true'
        run: rustup component add rustfmt

      - name: Cargo fmt
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path performance/runner/Cargo.toml --all -- --check

      - name: Test
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path performance/runner/Cargo.toml

      - name: Build (optimized)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path performance/runner/Cargo.toml
      # the cache action automatically caches this binary at the end of the job

  # run the performance measurements on the current or default branch
  measure-dev:
    needs: [latest-runner]
    name: Measure Dev Branch
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Dev Branch
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"

      - name: Install dbt
        run: pip install -r dev-requirements.txt -r editable-requirements.txt

      - name: Install Hyperfine
        run: wget https://github.com/sharkdp/hyperfine/releases/download/v1.11.0/hyperfine_1.11.0_amd64.deb && sudo dpkg -i hyperfine_1.11.0_amd64.deb

      # runner was just accessed or built so it should always be there
      - name: Fetch Runner From Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.RUNNER_CACHE_PATH }}
          key: ${{ runner.os }}-${{ hashFiles('performance/runner/Cargo.toml')}}-${{ hashFiles('performance/runner/src/*') }}

      - name: Move Runner
        run: mv performance/runner/target/release/runner ./

      - name: Change Runner Permissions
        run: chmod +x ./runner

      # `${{ github.workspace }}` is used to pass the absolute path
      - name: Run Measurement
        run: ./runner measure -b dev -p ${{ github.workspace }}/performance/projects/

      - name: Upload Results
        uses: actions/upload-artifact@v2
        with:
          name: dev-results
          path: performance/results/

  # detect regressions on the output generated from measuring
  # the two branches. Exits with non-zero code if a regression is detected.
  calculate-regressions:
    needs: [measure-dev]
    name: Compare Results
    runs-on: ubuntu-latest
    steps:

      - name: Download Dev Results
        uses: actions/download-artifact@v2
        with:
          name: dev-results

      # runner was just accessed or built so it should always be there
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.RUNNER_CACHE_PATH }}
          key: ${{ runner.os }}-${{ hashFiles('performance/runner/Cargo.toml')}}-${{ hashFiles('performance/runner/src/*') }}

      - name: Move Runner
        run: mv performance/runner/target/release/runner ./

      - name: Change Runner Permissions
        run: chmod +x ./runner

      - name: Make Results Directory
        run: mkdir ./final-output/

      # TODO compare against baseline somehow

      - name: Run Calculation
        run: ./runner calculate -r ./ -o ./final-output/

      - name: Upload Results
        uses: actions/upload-artifact@v2
        # makes sure the upload step runs even if a regression was found
        if: ${{ always() }}
        with:
          name: final-calculations
          path: ./final-output/*
